
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "sagui-platform.fullname" . }}-database-initscripts
  labels:
    {{- include "sagui-platform.labels" . | nindent 4 }}
data:
  00_pg_hba_config_sh: |-
    echo "host  all  all  all   md5" >> /var/lib/postgresql/data/pgdata/pg_hba.conf
  10_pgtune.sql: |
{{ .Values.database.pgtuneConfig | indent 4 }}
  15_custom_config.sql: |
    -- Log messages from info level and above
    ALTER SYSTEM SET log_min_messages to 'info';
  20_postgis.sh: |-
    #!/bin/bash
    set -e

    # Perform all actions as $POSTGRES_USER
    export PGUSER="$POSTGRES_USER"

    # Create the 'template_postgis' template db
    "${psql[@]}" <<- 'EOSQL'
    CREATE DATABASE template_postgis IS_TEMPLATE true;
    EOSQL

    # Load PostGIS into both template_database and $POSTGRES_DB
    for DB in template_postgis "$POSTGRES_DB"; do
      echo "Loading PostGIS extensions into $DB"
      "${psql[@]}" --dbname="$DB" <<-'EOSQL'
        CREATE EXTENSION IF NOT EXISTS postgis;
        CREATE EXTENSION IF NOT EXISTS postgis_topology;
        -- Reconnect to update pg_setting.resetval
        -- See https://github.com/postgis/docker-postgis/issues/288
        \c
        CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
        CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;
    EOSQL
    done
  30_schema.sql: |-
    CREATE SCHEMA IF NOT EXISTS {{ .Values.database.schema }};
  40_users.sql: |-
    -- pg_tileserv user
    DROP ROLE IF EXISTS tileserv;
    CREATE ROLE tileserv WITH
      LOGIN
      ENCRYPTED PASSWORD 'pg_tileserv'
      CONNECTION LIMIT 50;

    GRANT USAGE ON SCHEMA {{ .Values.database.schema }} TO tileserv;
    